// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  item: (where?: ItemWhereInput) => Promise<boolean>;
  need: (where?: NeedWhereInput) => Promise<boolean>;
  party: (where?: PartyWhereInput) => Promise<boolean>;
  provider: (where?: ProviderWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  need: (where: NeedWhereUniqueInput) => NeedNullablePromise;
  needs: (args?: {
    where?: NeedWhereInput;
    orderBy?: NeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Need>;
  needsConnection: (args?: {
    where?: NeedWhereInput;
    orderBy?: NeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NeedConnectionPromise;
  party: (where: PartyWhereUniqueInput) => PartyNullablePromise;
  parties: (args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Party>;
  partiesConnection: (args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartyConnectionPromise;
  provider: (where: ProviderWhereUniqueInput) => ProviderNullablePromise;
  providers: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Provider>;
  providersConnection: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProviderConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createNeed: (data: NeedCreateInput) => NeedPromise;
  updateNeed: (args: {
    data: NeedUpdateInput;
    where: NeedWhereUniqueInput;
  }) => NeedPromise;
  updateManyNeeds: (args: {
    data: NeedUpdateManyMutationInput;
    where?: NeedWhereInput;
  }) => BatchPayloadPromise;
  upsertNeed: (args: {
    where: NeedWhereUniqueInput;
    create: NeedCreateInput;
    update: NeedUpdateInput;
  }) => NeedPromise;
  deleteNeed: (where: NeedWhereUniqueInput) => NeedPromise;
  deleteManyNeeds: (where?: NeedWhereInput) => BatchPayloadPromise;
  createParty: (data: PartyCreateInput) => PartyPromise;
  updateParty: (args: {
    data: PartyUpdateInput;
    where: PartyWhereUniqueInput;
  }) => PartyPromise;
  updateManyParties: (args: {
    data: PartyUpdateManyMutationInput;
    where?: PartyWhereInput;
  }) => BatchPayloadPromise;
  upsertParty: (args: {
    where: PartyWhereUniqueInput;
    create: PartyCreateInput;
    update: PartyUpdateInput;
  }) => PartyPromise;
  deleteParty: (where: PartyWhereUniqueInput) => PartyPromise;
  deleteManyParties: (where?: PartyWhereInput) => BatchPayloadPromise;
  createProvider: (data: ProviderCreateInput) => ProviderPromise;
  updateProvider: (args: {
    data: ProviderUpdateInput;
    where: ProviderWhereUniqueInput;
  }) => ProviderPromise;
  updateManyProviders: (args: {
    data: ProviderUpdateManyMutationInput;
    where?: ProviderWhereInput;
  }) => BatchPayloadPromise;
  upsertProvider: (args: {
    where: ProviderWhereUniqueInput;
    create: ProviderCreateInput;
    update: ProviderUpdateInput;
  }) => ProviderPromise;
  deleteProvider: (where: ProviderWhereUniqueInput) => ProviderPromise;
  deleteManyProviders: (where?: ProviderWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  need: (
    where?: NeedSubscriptionWhereInput
  ) => NeedSubscriptionPayloadSubscription;
  party: (
    where?: PartySubscriptionWhereInput
  ) => PartySubscriptionPayloadSubscription;
  provider: (
    where?: ProviderSubscriptionWhereInput
  ) => ProviderSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ItemOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type Priority = "Low" | "Medium" | "High";

export type PartyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "date_ASC"
  | "date_DESC"
  | "location_ASC"
  | "location_DESC"
  | "image_ASC"
  | "image_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "image_ASC"
  | "image_DESC";

export type NeedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "quantityUnit_ASC"
  | "quantityUnit_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "priority_ASC"
  | "priority_DESC";

export type ProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export type NeedWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PartyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  host?: Maybe<UserWhereInput>;
  guests_every?: Maybe<UserWhereInput>;
  guests_some?: Maybe<UserWhereInput>;
  guests_none?: Maybe<UserWhereInput>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  needs_every?: Maybe<NeedWhereInput>;
  needs_some?: Maybe<NeedWhereInput>;
  needs_none?: Maybe<NeedWhereInput>;
  AND?: Maybe<PartyWhereInput[] | PartyWhereInput>;
  OR?: Maybe<PartyWhereInput[] | PartyWhereInput>;
  NOT?: Maybe<PartyWhereInput[] | PartyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  hostOf_every?: Maybe<PartyWhereInput>;
  hostOf_some?: Maybe<PartyWhereInput>;
  hostOf_none?: Maybe<PartyWhereInput>;
  guestOf_every?: Maybe<PartyWhereInput>;
  guestOf_some?: Maybe<PartyWhereInput>;
  guestOf_none?: Maybe<PartyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NeedWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  item?: Maybe<ItemWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  quantityUnit_not?: Maybe<String>;
  quantityUnit_in?: Maybe<String[] | String>;
  quantityUnit_not_in?: Maybe<String[] | String>;
  quantityUnit_lt?: Maybe<String>;
  quantityUnit_lte?: Maybe<String>;
  quantityUnit_gt?: Maybe<String>;
  quantityUnit_gte?: Maybe<String>;
  quantityUnit_contains?: Maybe<String>;
  quantityUnit_not_contains?: Maybe<String>;
  quantityUnit_starts_with?: Maybe<String>;
  quantityUnit_not_starts_with?: Maybe<String>;
  quantityUnit_ends_with?: Maybe<String>;
  quantityUnit_not_ends_with?: Maybe<String>;
  party?: Maybe<PartyWhereInput>;
  providers_every?: Maybe<ProviderWhereInput>;
  providers_some?: Maybe<ProviderWhereInput>;
  providers_none?: Maybe<ProviderWhereInput>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  AND?: Maybe<NeedWhereInput[] | NeedWhereInput>;
  OR?: Maybe<NeedWhereInput[] | NeedWhereInput>;
  NOT?: Maybe<NeedWhereInput[] | NeedWhereInput>;
}

export interface ProviderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  need?: Maybe<NeedWhereInput>;
  AND?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  OR?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  NOT?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
}

export type PartyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProviderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ItemUpdateInput {
  name?: Maybe<String>;
}

export interface ItemUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface NeedCreateInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneInput;
  quantity: Int;
  quantityUnit?: Maybe<String>;
  party: PartyCreateOneWithoutNeedsInput;
  providers?: Maybe<ProviderCreateManyWithoutNeedInput>;
  category?: Maybe<NeedCreatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ItemCreateOneInput {
  create?: Maybe<ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface PartyCreateOneWithoutNeedsInput {
  create?: Maybe<PartyCreateWithoutNeedsInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface PartyCreateWithoutNeedsInput {
  id?: Maybe<ID_Input>;
  title: String;
  host: UserCreateOneWithoutHostOfInput;
  guests?: Maybe<UserCreateManyWithoutGuestOfInput>;
  date: DateTimeInput;
  location: String;
  image: String;
  description: String;
}

export interface UserCreateOneWithoutHostOfInput {
  create?: Maybe<UserCreateWithoutHostOfInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutHostOfInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  guestOf?: Maybe<PartyCreateManyWithoutGuestsInput>;
}

export interface PartyCreateManyWithoutGuestsInput {
  create?: Maybe<
    PartyCreateWithoutGuestsInput[] | PartyCreateWithoutGuestsInput
  >;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
}

export interface PartyCreateWithoutGuestsInput {
  id?: Maybe<ID_Input>;
  title: String;
  host: UserCreateOneWithoutHostOfInput;
  date: DateTimeInput;
  location: String;
  image: String;
  description: String;
  needs?: Maybe<NeedCreateManyWithoutPartyInput>;
}

export interface NeedCreateManyWithoutPartyInput {
  create?: Maybe<NeedCreateWithoutPartyInput[] | NeedCreateWithoutPartyInput>;
  connect?: Maybe<NeedWhereUniqueInput[] | NeedWhereUniqueInput>;
}

export interface NeedCreateWithoutPartyInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneInput;
  quantity: Int;
  quantityUnit?: Maybe<String>;
  providers?: Maybe<ProviderCreateManyWithoutNeedInput>;
  category?: Maybe<NeedCreatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ProviderCreateManyWithoutNeedInput {
  create?: Maybe<
    ProviderCreateWithoutNeedInput[] | ProviderCreateWithoutNeedInput
  >;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutNeedInput {
  id?: Maybe<ID_Input>;
  quantity: Int;
  user: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  hostOf?: Maybe<PartyCreateManyWithoutHostInput>;
  guestOf?: Maybe<PartyCreateManyWithoutGuestsInput>;
}

export interface PartyCreateManyWithoutHostInput {
  create?: Maybe<PartyCreateWithoutHostInput[] | PartyCreateWithoutHostInput>;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
}

export interface PartyCreateWithoutHostInput {
  id?: Maybe<ID_Input>;
  title: String;
  guests?: Maybe<UserCreateManyWithoutGuestOfInput>;
  date: DateTimeInput;
  location: String;
  image: String;
  description: String;
  needs?: Maybe<NeedCreateManyWithoutPartyInput>;
}

export interface UserCreateManyWithoutGuestOfInput {
  create?: Maybe<
    UserCreateWithoutGuestOfInput[] | UserCreateWithoutGuestOfInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutGuestOfInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  hostOf?: Maybe<PartyCreateManyWithoutHostInput>;
}

export interface NeedCreatecategoryInput {
  set?: Maybe<String[] | String>;
}

export interface NeedUpdateInput {
  item?: Maybe<ItemUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  party?: Maybe<PartyUpdateOneRequiredWithoutNeedsInput>;
  providers?: Maybe<ProviderUpdateManyWithoutNeedInput>;
  category?: Maybe<NeedUpdatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ItemUpdateOneRequiredInput {
  create?: Maybe<ItemCreateInput>;
  update?: Maybe<ItemUpdateDataInput>;
  upsert?: Maybe<ItemUpsertNestedInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemUpdateDataInput {
  name?: Maybe<String>;
}

export interface ItemUpsertNestedInput {
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface PartyUpdateOneRequiredWithoutNeedsInput {
  create?: Maybe<PartyCreateWithoutNeedsInput>;
  update?: Maybe<PartyUpdateWithoutNeedsDataInput>;
  upsert?: Maybe<PartyUpsertWithoutNeedsInput>;
  connect?: Maybe<PartyWhereUniqueInput>;
}

export interface PartyUpdateWithoutNeedsDataInput {
  title?: Maybe<String>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostOfInput>;
  guests?: Maybe<UserUpdateManyWithoutGuestOfInput>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutHostOfInput {
  create?: Maybe<UserCreateWithoutHostOfInput>;
  update?: Maybe<UserUpdateWithoutHostOfDataInput>;
  upsert?: Maybe<UserUpsertWithoutHostOfInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutHostOfDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  guestOf?: Maybe<PartyUpdateManyWithoutGuestsInput>;
}

export interface PartyUpdateManyWithoutGuestsInput {
  create?: Maybe<
    PartyCreateWithoutGuestsInput[] | PartyCreateWithoutGuestsInput
  >;
  delete?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  set?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  disconnect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  update?: Maybe<
    | PartyUpdateWithWhereUniqueWithoutGuestsInput[]
    | PartyUpdateWithWhereUniqueWithoutGuestsInput
  >;
  upsert?: Maybe<
    | PartyUpsertWithWhereUniqueWithoutGuestsInput[]
    | PartyUpsertWithWhereUniqueWithoutGuestsInput
  >;
  deleteMany?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  updateMany?: Maybe<
    PartyUpdateManyWithWhereNestedInput[] | PartyUpdateManyWithWhereNestedInput
  >;
}

export interface PartyUpdateWithWhereUniqueWithoutGuestsInput {
  where: PartyWhereUniqueInput;
  data: PartyUpdateWithoutGuestsDataInput;
}

export interface PartyUpdateWithoutGuestsDataInput {
  title?: Maybe<String>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostOfInput>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
  needs?: Maybe<NeedUpdateManyWithoutPartyInput>;
}

export interface NeedUpdateManyWithoutPartyInput {
  create?: Maybe<NeedCreateWithoutPartyInput[] | NeedCreateWithoutPartyInput>;
  delete?: Maybe<NeedWhereUniqueInput[] | NeedWhereUniqueInput>;
  connect?: Maybe<NeedWhereUniqueInput[] | NeedWhereUniqueInput>;
  set?: Maybe<NeedWhereUniqueInput[] | NeedWhereUniqueInput>;
  disconnect?: Maybe<NeedWhereUniqueInput[] | NeedWhereUniqueInput>;
  update?: Maybe<
    | NeedUpdateWithWhereUniqueWithoutPartyInput[]
    | NeedUpdateWithWhereUniqueWithoutPartyInput
  >;
  upsert?: Maybe<
    | NeedUpsertWithWhereUniqueWithoutPartyInput[]
    | NeedUpsertWithWhereUniqueWithoutPartyInput
  >;
  deleteMany?: Maybe<NeedScalarWhereInput[] | NeedScalarWhereInput>;
  updateMany?: Maybe<
    NeedUpdateManyWithWhereNestedInput[] | NeedUpdateManyWithWhereNestedInput
  >;
}

export interface NeedUpdateWithWhereUniqueWithoutPartyInput {
  where: NeedWhereUniqueInput;
  data: NeedUpdateWithoutPartyDataInput;
}

export interface NeedUpdateWithoutPartyDataInput {
  item?: Maybe<ItemUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  providers?: Maybe<ProviderUpdateManyWithoutNeedInput>;
  category?: Maybe<NeedUpdatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ProviderUpdateManyWithoutNeedInput {
  create?: Maybe<
    ProviderCreateWithoutNeedInput[] | ProviderCreateWithoutNeedInput
  >;
  delete?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  connect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  set?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  disconnect?: Maybe<ProviderWhereUniqueInput[] | ProviderWhereUniqueInput>;
  update?: Maybe<
    | ProviderUpdateWithWhereUniqueWithoutNeedInput[]
    | ProviderUpdateWithWhereUniqueWithoutNeedInput
  >;
  upsert?: Maybe<
    | ProviderUpsertWithWhereUniqueWithoutNeedInput[]
    | ProviderUpsertWithWhereUniqueWithoutNeedInput
  >;
  deleteMany?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  updateMany?: Maybe<
    | ProviderUpdateManyWithWhereNestedInput[]
    | ProviderUpdateManyWithWhereNestedInput
  >;
}

export interface ProviderUpdateWithWhereUniqueWithoutNeedInput {
  where: ProviderWhereUniqueInput;
  data: ProviderUpdateWithoutNeedDataInput;
}

export interface ProviderUpdateWithoutNeedDataInput {
  quantity?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  hostOf?: Maybe<PartyUpdateManyWithoutHostInput>;
  guestOf?: Maybe<PartyUpdateManyWithoutGuestsInput>;
}

export interface PartyUpdateManyWithoutHostInput {
  create?: Maybe<PartyCreateWithoutHostInput[] | PartyCreateWithoutHostInput>;
  delete?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  connect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  set?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  disconnect?: Maybe<PartyWhereUniqueInput[] | PartyWhereUniqueInput>;
  update?: Maybe<
    | PartyUpdateWithWhereUniqueWithoutHostInput[]
    | PartyUpdateWithWhereUniqueWithoutHostInput
  >;
  upsert?: Maybe<
    | PartyUpsertWithWhereUniqueWithoutHostInput[]
    | PartyUpsertWithWhereUniqueWithoutHostInput
  >;
  deleteMany?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  updateMany?: Maybe<
    PartyUpdateManyWithWhereNestedInput[] | PartyUpdateManyWithWhereNestedInput
  >;
}

export interface PartyUpdateWithWhereUniqueWithoutHostInput {
  where: PartyWhereUniqueInput;
  data: PartyUpdateWithoutHostDataInput;
}

export interface PartyUpdateWithoutHostDataInput {
  title?: Maybe<String>;
  guests?: Maybe<UserUpdateManyWithoutGuestOfInput>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
  needs?: Maybe<NeedUpdateManyWithoutPartyInput>;
}

export interface UserUpdateManyWithoutGuestOfInput {
  create?: Maybe<
    UserCreateWithoutGuestOfInput[] | UserCreateWithoutGuestOfInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutGuestOfInput[]
    | UserUpdateWithWhereUniqueWithoutGuestOfInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutGuestOfInput[]
    | UserUpsertWithWhereUniqueWithoutGuestOfInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutGuestOfInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGuestOfDataInput;
}

export interface UserUpdateWithoutGuestOfDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  hostOf?: Maybe<PartyUpdateManyWithoutHostInput>;
}

export interface UserUpsertWithWhereUniqueWithoutGuestOfInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGuestOfDataInput;
  create: UserCreateWithoutGuestOfInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface PartyUpsertWithWhereUniqueWithoutHostInput {
  where: PartyWhereUniqueInput;
  update: PartyUpdateWithoutHostDataInput;
  create: PartyCreateWithoutHostInput;
}

export interface PartyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  OR?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
  NOT?: Maybe<PartyScalarWhereInput[] | PartyScalarWhereInput>;
}

export interface PartyUpdateManyWithWhereNestedInput {
  where: PartyScalarWhereInput;
  data: PartyUpdateManyDataInput;
}

export interface PartyUpdateManyDataInput {
  title?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProviderUpsertWithWhereUniqueWithoutNeedInput {
  where: ProviderWhereUniqueInput;
  update: ProviderUpdateWithoutNeedDataInput;
  create: ProviderCreateWithoutNeedInput;
}

export interface ProviderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  OR?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
  NOT?: Maybe<ProviderScalarWhereInput[] | ProviderScalarWhereInput>;
}

export interface ProviderUpdateManyWithWhereNestedInput {
  where: ProviderScalarWhereInput;
  data: ProviderUpdateManyDataInput;
}

export interface ProviderUpdateManyDataInput {
  quantity?: Maybe<Int>;
}

export interface NeedUpdatecategoryInput {
  set?: Maybe<String[] | String>;
}

export interface NeedUpsertWithWhereUniqueWithoutPartyInput {
  where: NeedWhereUniqueInput;
  update: NeedUpdateWithoutPartyDataInput;
  create: NeedCreateWithoutPartyInput;
}

export interface NeedScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  quantityUnit_not?: Maybe<String>;
  quantityUnit_in?: Maybe<String[] | String>;
  quantityUnit_not_in?: Maybe<String[] | String>;
  quantityUnit_lt?: Maybe<String>;
  quantityUnit_lte?: Maybe<String>;
  quantityUnit_gt?: Maybe<String>;
  quantityUnit_gte?: Maybe<String>;
  quantityUnit_contains?: Maybe<String>;
  quantityUnit_not_contains?: Maybe<String>;
  quantityUnit_starts_with?: Maybe<String>;
  quantityUnit_not_starts_with?: Maybe<String>;
  quantityUnit_ends_with?: Maybe<String>;
  quantityUnit_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  AND?: Maybe<NeedScalarWhereInput[] | NeedScalarWhereInput>;
  OR?: Maybe<NeedScalarWhereInput[] | NeedScalarWhereInput>;
  NOT?: Maybe<NeedScalarWhereInput[] | NeedScalarWhereInput>;
}

export interface NeedUpdateManyWithWhereNestedInput {
  where: NeedScalarWhereInput;
  data: NeedUpdateManyDataInput;
}

export interface NeedUpdateManyDataInput {
  quantity?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  category?: Maybe<NeedUpdatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface PartyUpsertWithWhereUniqueWithoutGuestsInput {
  where: PartyWhereUniqueInput;
  update: PartyUpdateWithoutGuestsDataInput;
  create: PartyCreateWithoutGuestsInput;
}

export interface UserUpsertWithoutHostOfInput {
  update: UserUpdateWithoutHostOfDataInput;
  create: UserCreateWithoutHostOfInput;
}

export interface PartyUpsertWithoutNeedsInput {
  update: PartyUpdateWithoutNeedsDataInput;
  create: PartyCreateWithoutNeedsInput;
}

export interface NeedUpdateManyMutationInput {
  quantity?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  category?: Maybe<NeedUpdatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface PartyCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  host: UserCreateOneWithoutHostOfInput;
  guests?: Maybe<UserCreateManyWithoutGuestOfInput>;
  date: DateTimeInput;
  location: String;
  image: String;
  description: String;
  needs?: Maybe<NeedCreateManyWithoutPartyInput>;
}

export interface PartyUpdateInput {
  title?: Maybe<String>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostOfInput>;
  guests?: Maybe<UserUpdateManyWithoutGuestOfInput>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
  needs?: Maybe<NeedUpdateManyWithoutPartyInput>;
}

export interface PartyUpdateManyMutationInput {
  title?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ProviderCreateInput {
  id?: Maybe<ID_Input>;
  quantity: Int;
  user: UserCreateOneInput;
  need: NeedCreateOneWithoutProvidersInput;
}

export interface NeedCreateOneWithoutProvidersInput {
  create?: Maybe<NeedCreateWithoutProvidersInput>;
  connect?: Maybe<NeedWhereUniqueInput>;
}

export interface NeedCreateWithoutProvidersInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneInput;
  quantity: Int;
  quantityUnit?: Maybe<String>;
  party: PartyCreateOneWithoutNeedsInput;
  category?: Maybe<NeedCreatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface ProviderUpdateInput {
  quantity?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  need?: Maybe<NeedUpdateOneRequiredWithoutProvidersInput>;
}

export interface NeedUpdateOneRequiredWithoutProvidersInput {
  create?: Maybe<NeedCreateWithoutProvidersInput>;
  update?: Maybe<NeedUpdateWithoutProvidersDataInput>;
  upsert?: Maybe<NeedUpsertWithoutProvidersInput>;
  connect?: Maybe<NeedWhereUniqueInput>;
}

export interface NeedUpdateWithoutProvidersDataInput {
  item?: Maybe<ItemUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
  quantityUnit?: Maybe<String>;
  party?: Maybe<PartyUpdateOneRequiredWithoutNeedsInput>;
  category?: Maybe<NeedUpdatecategoryInput>;
  notes?: Maybe<String>;
  priority?: Maybe<Priority>;
}

export interface NeedUpsertWithoutProvidersInput {
  update: NeedUpdateWithoutProvidersDataInput;
  create: NeedCreateWithoutProvidersInput;
}

export interface ProviderUpdateManyMutationInput {
  quantity?: Maybe<Int>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  hostOf?: Maybe<PartyUpdateManyWithoutHostInput>;
  guestOf?: Maybe<PartyUpdateManyWithoutGuestsInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface NeedSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NeedWhereInput>;
  AND?: Maybe<NeedSubscriptionWhereInput[] | NeedSubscriptionWhereInput>;
  OR?: Maybe<NeedSubscriptionWhereInput[] | NeedSubscriptionWhereInput>;
  NOT?: Maybe<NeedSubscriptionWhereInput[] | NeedSubscriptionWhereInput>;
}

export interface PartySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartyWhereInput>;
  AND?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
  OR?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
  NOT?: Maybe<PartySubscriptionWhereInput[] | PartySubscriptionWhereInput>;
}

export interface ProviderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProviderWhereInput>;
  AND?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
  OR?: Maybe<ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput>;
  NOT?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Item {
  id: ID_Output;
  name: String;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Need {
  id: ID_Output;
  quantity: Int;
  quantityUnit?: String;
  category: String[];
  notes?: String;
  priority?: Priority;
}

export interface NeedPromise extends Promise<Need>, Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
  quantityUnit: () => Promise<String>;
  party: <T = PartyPromise>() => T;
  providers: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<String[]>;
  notes: () => Promise<String>;
  priority: () => Promise<Priority>;
}

export interface NeedSubscription
  extends Promise<AsyncIterator<Need>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  item: <T = ItemSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
  quantityUnit: () => Promise<AsyncIterator<String>>;
  party: <T = PartySubscription>() => T;
  providers: <T = Promise<AsyncIterator<ProviderSubscription>>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<AsyncIterator<String[]>>;
  notes: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Priority>>;
}

export interface NeedNullablePromise
  extends Promise<Need | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  quantity: () => Promise<Int>;
  quantityUnit: () => Promise<String>;
  party: <T = PartyPromise>() => T;
  providers: <T = FragmentableArray<Provider>>(args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: () => Promise<String[]>;
  notes: () => Promise<String>;
  priority: () => Promise<Priority>;
}

export interface Party {
  id: ID_Output;
  title: String;
  date: DateTimeOutput;
  location: String;
  image: String;
  description: String;
}

export interface PartyPromise extends Promise<Party>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  host: <T = UserPromise>() => T;
  guests: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
  needs: <T = FragmentableArray<Need>>(args?: {
    where?: NeedWhereInput;
    orderBy?: NeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PartySubscription
  extends Promise<AsyncIterator<Party>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  host: <T = UserSubscription>() => T;
  guests: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  needs: <T = Promise<AsyncIterator<NeedSubscription>>>(args?: {
    where?: NeedWhereInput;
    orderBy?: NeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PartyNullablePromise
  extends Promise<Party | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  host: <T = UserPromise>() => T;
  guests: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
  needs: <T = FragmentableArray<Need>>(args?: {
    where?: NeedWhereInput;
    orderBy?: NeedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  hostOf: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  guestOf: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  hostOf: <T = Promise<AsyncIterator<PartySubscription>>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  guestOf: <T = Promise<AsyncIterator<PartySubscription>>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  hostOf: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  guestOf: <T = FragmentableArray<Party>>(args?: {
    where?: PartyWhereInput;
    orderBy?: PartyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Provider {
  id: ID_Output;
  quantity: Int;
}

export interface ProviderPromise extends Promise<Provider>, Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  need: <T = NeedPromise>() => T;
}

export interface ProviderSubscription
  extends Promise<AsyncIterator<Provider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  need: <T = NeedSubscription>() => T;
}

export interface ProviderNullablePromise
  extends Promise<Provider | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  need: <T = NeedPromise>() => T;
}

export interface NeedConnection {
  pageInfo: PageInfo;
  edges: NeedEdge[];
}

export interface NeedConnectionPromise
  extends Promise<NeedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NeedEdge>>() => T;
  aggregate: <T = AggregateNeedPromise>() => T;
}

export interface NeedConnectionSubscription
  extends Promise<AsyncIterator<NeedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NeedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNeedSubscription>() => T;
}

export interface NeedEdge {
  node: Need;
  cursor: String;
}

export interface NeedEdgePromise extends Promise<NeedEdge>, Fragmentable {
  node: <T = NeedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NeedEdgeSubscription
  extends Promise<AsyncIterator<NeedEdge>>,
    Fragmentable {
  node: <T = NeedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNeed {
  count: Int;
}

export interface AggregateNeedPromise
  extends Promise<AggregateNeed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNeedSubscription
  extends Promise<AsyncIterator<AggregateNeed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PartyConnection {
  pageInfo: PageInfo;
  edges: PartyEdge[];
}

export interface PartyConnectionPromise
  extends Promise<PartyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartyEdge>>() => T;
  aggregate: <T = AggregatePartyPromise>() => T;
}

export interface PartyConnectionSubscription
  extends Promise<AsyncIterator<PartyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartyEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartySubscription>() => T;
}

export interface PartyEdge {
  node: Party;
  cursor: String;
}

export interface PartyEdgePromise extends Promise<PartyEdge>, Fragmentable {
  node: <T = PartyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartyEdgeSubscription
  extends Promise<AsyncIterator<PartyEdge>>,
    Fragmentable {
  node: <T = PartySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateParty {
  count: Int;
}

export interface AggregatePartyPromise
  extends Promise<AggregateParty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartySubscription
  extends Promise<AsyncIterator<AggregateParty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProviderConnection {
  pageInfo: PageInfo;
  edges: ProviderEdge[];
}

export interface ProviderConnectionPromise
  extends Promise<ProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProviderEdge>>() => T;
  aggregate: <T = AggregateProviderPromise>() => T;
}

export interface ProviderConnectionSubscription
  extends Promise<AsyncIterator<ProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProviderSubscription>() => T;
}

export interface ProviderEdge {
  node: Provider;
  cursor: String;
}

export interface ProviderEdgePromise
  extends Promise<ProviderEdge>,
    Fragmentable {
  node: <T = ProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProviderEdgeSubscription
  extends Promise<AsyncIterator<ProviderEdge>>,
    Fragmentable {
  node: <T = ProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProvider {
  count: Int;
}

export interface AggregateProviderPromise
  extends Promise<AggregateProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProviderSubscription
  extends Promise<AsyncIterator<AggregateProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NeedSubscriptionPayload {
  mutation: MutationType;
  node: Need;
  updatedFields: String[];
  previousValues: NeedPreviousValues;
}

export interface NeedSubscriptionPayloadPromise
  extends Promise<NeedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NeedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NeedPreviousValuesPromise>() => T;
}

export interface NeedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NeedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NeedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NeedPreviousValuesSubscription>() => T;
}

export interface NeedPreviousValues {
  id: ID_Output;
  quantity: Int;
  quantityUnit?: String;
  category: String[];
  notes?: String;
  priority?: Priority;
}

export interface NeedPreviousValuesPromise
  extends Promise<NeedPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
  quantityUnit: () => Promise<String>;
  category: () => Promise<String[]>;
  notes: () => Promise<String>;
  priority: () => Promise<Priority>;
}

export interface NeedPreviousValuesSubscription
  extends Promise<AsyncIterator<NeedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  quantityUnit: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String[]>>;
  notes: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Priority>>;
}

export interface PartySubscriptionPayload {
  mutation: MutationType;
  node: Party;
  updatedFields: String[];
  previousValues: PartyPreviousValues;
}

export interface PartySubscriptionPayloadPromise
  extends Promise<PartySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartyPreviousValuesPromise>() => T;
}

export interface PartySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartyPreviousValuesSubscription>() => T;
}

export interface PartyPreviousValues {
  id: ID_Output;
  title: String;
  date: DateTimeOutput;
  location: String;
  image: String;
  description: String;
}

export interface PartyPreviousValuesPromise
  extends Promise<PartyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  description: () => Promise<String>;
}

export interface PartyPreviousValuesSubscription
  extends Promise<AsyncIterator<PartyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ProviderSubscriptionPayload {
  mutation: MutationType;
  node: Provider;
  updatedFields: String[];
  previousValues: ProviderPreviousValues;
}

export interface ProviderSubscriptionPayloadPromise
  extends Promise<ProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProviderPreviousValuesPromise>() => T;
}

export interface ProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProviderPreviousValuesSubscription>() => T;
}

export interface ProviderPreviousValues {
  id: ID_Output;
  quantity: Int;
}

export interface ProviderPreviousValuesPromise
  extends Promise<ProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
}

export interface ProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<ProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Party",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Need",
    embedded: false
  },
  {
    name: "Provider",
    embedded: false
  },
  {
    name: "Priority",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
